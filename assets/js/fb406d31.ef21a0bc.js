"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[35364],{24050:function(t){t.exports=JSON.parse('{"functions":[{"name":"createKeyMap","desc":"Should be called \\"createInputKeyMap\\". Creates a new InputKeyMap.","params":[{"name":"inputMode","desc":"","lua_type":"InputMode"},{"name":"inputTypes","desc":"","lua_type":"{ InputType }"}],"returns":[{"desc":"","lua_type":"InputKeyMap"}],"function_type":"static","source":{"line":79,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"getInputTypesSetForActionBinding","desc":"","params":[{"name":"inputKeyMapList","desc":"","lua_type":"InputKeyMapList"}],"returns":[{"desc":"","lua_type":"{ KeyCode | UserInputType }"}],"function_type":"static","source":{"line":93,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"getInputTypesForActionBinding","desc":"Converts keymap into ContextActionService friendly types","params":[{"name":"inputKeyMapList","desc":"","lua_type":"InputKeyMapList"}],"returns":[{"desc":"","lua_type":"{ KeyCode | UserInputType }"}],"function_type":"static","source":{"line":102,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"getInputTypeListForMode","desc":"Given an inputMode, gets the relevant lists available","params":[{"name":"inputKeyMapList","desc":"","lua_type":"InputKeyMapList"},{"name":"inputMode","desc":"","lua_type":"InputMode"}],"returns":[{"desc":"","lua_type":"{ InputKeyMap }"}],"function_type":"static","source":{"line":126,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"getInputTypeSetForMode","desc":"Gets a set of input types for a given mode from the list.","params":[{"name":"inputKeyMapList","desc":"","lua_type":"InputKeyMapList"},{"name":"inputMode","desc":"","lua_type":"InputMode"}],"returns":[{"desc":"","lua_type":"{ [InputType] = true }"}],"function_type":"static","source":{"line":153,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"getInputModes","desc":"Retrieves the set of input modes for a given list.","params":[{"name":"inputKeyMapList","desc":"","lua_type":"InputKeyMapList"}],"returns":[{"desc":"","lua_type":"{ InputMode }"}],"function_type":"static","source":{"line":175,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"getSlottedTouchButtonData","desc":"Gets slotted touch button data for an inputKeyMapList","params":[{"name":"inputKeyMapList","desc":"","lua_type":"InputKeyMapList"}],"returns":[{"desc":"","lua_type":"{ SlottedTouchButtonData }"}],"function_type":"static","source":{"line":201,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"isSlottedTouchButton","desc":"Returns whether an inputType is a SlottedTouchButton type","params":[{"name":"inputType","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":227,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"createSlottedTouchButton","desc":"Touch buttons should always show up in the same position\\nWe use the SlotId to determine which slot we should put\\nthese buttons in.","params":[{"name":"slotId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"SlottedTouchButton"}],"function_type":"static","source":{"line":249,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"getUniqueKeyForInputType","desc":"Computes a unique id for an inputType which can be used\\nin a set to deduplicate/compare the objects. Used to know\\nwhen to exclude different types from each other.","params":[{"name":"inputType","desc":"","lua_type":"InputType"}],"returns":[{"desc":"","lua_type":"any"}],"function_type":"static","source":{"line":266,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"isRobloxTouchButton","desc":"Only returns true if we\'re a Roblox touch button","params":[{"name":"inputKeyMapList","desc":"","lua_type":"InputKeyMapList"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":279,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"isTapInWorld","desc":"Whether this input type is a tap in the world input (for touched events)","params":[{"name":"inputKeyMapList","desc":"","lua_type":"InputKeyMapList"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":299,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}}],"properties":[],"types":[{"name":"InputType","desc":"A valid input type that can be represented here.","lua_type":"KeyCode | UserInputType | SlottedTouchButton | \\"TouchButton\\" | \\"Tap\\" | any","source":{"line":56,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"InputKeyMap","desc":"A grouping of input types for a specific input mode to use.","fields":[{"name":"inputMode","lua_type":"InputMode","desc":""},{"name":"inputTypes","lua_type":"{ InputType }","desc":""}],"source":{"line":65,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"InputKeyMapList","desc":"A mapping of input keys to maps","lua_type":"{ InputKeyMap }","source":{"line":71,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"SlottedTouchButtonData","desc":"Internal data representing a slotted touch button","fields":[{"name":"slotId","lua_type":"string","desc":""},{"name":"inputMode","lua_type":"InputMode","desc":""}],"source":{"line":194,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}},{"name":"SlottedTouchButton","desc":"A touch button that goes into a specific slot. This ensures\\nconsistent slot positions.","fields":[{"name":"type","lua_type":"\\"SlottedTouchButton\\"","desc":""},{"name":"slotId","lua_type":"string","desc":""}],"source":{"line":240,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}}],"name":"InputKeyMapUtils","desc":"Utility methods for input. Centralizes input. In the future, this will allow\\nuser configuration.\\n\\n```lua\\nlocal inputMap = {\\n\\tJUMP = {\\n\\t\\tInputKeyMapUtils.createKeyMap(INPUT_MODES.KeyboardAndMouse, { Enum.KeyCode.Space });\\n\\t\\tInputKeyMapUtils.createKeyMap(INPUT_MODES.Gamepads, { Enum.KeyCode.ButtonA });\\n\\t\\tInputKeyMapUtils.createKeyMap(INPUT_MODES.Touch, { InputKeyMapUtils.createSlottedTouchButton(\\"primary3\\") });\\n\\t};\\n\\tHONK = {\\n\\t\\tInputKeyMapUtils.createKeyMap(INPUT_MODES.KeyboardAndMouse, { Enum.KeyCode.H });\\n\\t\\tInputKeyMapUtils.createKeyMap(INPUT_MODES.Gamepads, { Enum.KeyCode.DPadUp });\\n\\t\\tInputKeyMapUtils.createKeyMap(INPUT_MODES.Touch, { InputKeyMapUtils.createSlottedTouchButton(\\"primary2\\") });\\n\\t};\\n\\tBOOST = {\\n\\t\\tInputKeyMapUtils.createKeyMap(INPUT_MODES.KeyboardAndMouse, { Enum.KeyCode.LeftControl });\\n\\t\\tInputKeyMapUtils.createKeyMap(INPUT_MODES.Gamepads, { Enum.KeyCode.ButtonX });\\n\\t\\tInputKeyMapUtils.createKeyMap(INPUT_MODES.Touch, { InputKeyMapUtils.createSlottedTouchButton(\\"primary4\\") });\\n\\t};\\n}\\n```\\n\\nThen, we can use these input maps in a variety of services, including [ScoredActionService] or\\njust binding directly to [ContextActionService].\\n\\n```lua\\nlocal inputKeyMapList = inputMap.JUMP\\n\\nContextActionService:BindActionAtPriority(\\n\\t\\"MyAction\\",\\n\\tfunction(_actionName, userInputState, inputObject)\\n\\t\\tprint(\\"Process input\\", inputObject)\\n\\tend,\\n\\tInputKeyMapUtils.isRobloxTouchButton(inputKeyMapList),\\n\\tEnum.ContextActionPriority.High.Value,\\n\\tunpack(InputKeyMapUtils.getInputTypesForActionBinding(inputKeyMapList)))\\n```","source":{"line":43,"path":"src/inputkeymaputils/src/Client/InputKeyMapUtils.lua"}}')}}]);
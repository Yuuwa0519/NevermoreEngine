"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[88347],{59199:function(e){e.exports=JSON.parse('{"functions":[{"name":"observeProperty","desc":"Observes an instance\'s property","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"propertyName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Observable<T>"}],"function_type":"static","source":{"line":29,"path":"src/instanceutils/src/Shared/RxInstanceUtils.lua"}},{"name":"observeAncestry","desc":"Observes an instance\'s ancestry","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"Observable<Instance>"}],"function_type":"static","source":{"line":51,"path":"src/instanceutils/src/Shared/RxInstanceUtils.lua"}},{"name":"observePropertyBrio","desc":"Returns a brio of the property value","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"propertyName","desc":"","lua_type":"string"},{"name":"predicate","desc":"Optional filter","lua_type":"((value: T) -> boolean)?"}],"returns":[{"desc":"","lua_type":"Observable<Brio<T>>"}],"function_type":"static","source":{"line":67,"path":"src/instanceutils/src/Shared/RxInstanceUtils.lua"}},{"name":"observeLastNamedChildBrio","desc":"Observes the last child with a specific name.","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"className","desc":"","lua_type":"string"},{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Observable<Brio<Instance>>"}],"function_type":"static","source":{"line":101,"path":"src/instanceutils/src/Shared/RxInstanceUtils.lua"}},{"name":"observeChildrenOfClassBrio","desc":"Observes all children of a specific class","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"className","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Observable<Instance>"}],"function_type":"static","source":{"line":154,"path":"src/instanceutils/src/Shared/RxInstanceUtils.lua"}},{"name":"observeChildrenBrio","desc":"Observes all children","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"predicate","desc":"Optional filter","lua_type":"((value: Instance) -> boolean)?"}],"returns":[{"desc":"","lua_type":"Observable<Brio<Instance>>"}],"function_type":"static","source":{"line":170,"path":"src/instanceutils/src/Shared/RxInstanceUtils.lua"}},{"name":"observeDescendants","desc":"Observes all descendants that match a predicate","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"predicate","desc":"Optional filter","lua_type":"((value: Instance) -> boolean)?"}],"returns":[{"desc":"","lua_type":"Observable<Brio<Instance>>"}],"function_type":"static","source":{"line":205,"path":"src/instanceutils/src/Shared/RxInstanceUtils.lua"}}],"properties":[],"types":[],"name":"RxInstanceUtils","desc":"Utility functions to observe the state of Roblox. This is a very powerful way to query\\nRoblox\'s state.\\n\\n:::tip\\nUse RxInstanceUtils to program streaming enabled games, and make it easy to debug. This API surface\\nlets you use Roblox as a source-of-truth which is very valuable.\\n:::","source":{"line":12,"path":"src/instanceutils/src/Shared/RxInstanceUtils.lua"}}')}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3504],{89655:function(e){e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new JSONTranslator from the given args.\\n\\n```lua\\nlocal translator = JSONTranslator.new(\\"en\\", {\\n\\tactions = {\\n\\t\\trespawn = \\"Respawn {playerName}\\";\\n\\t};\\n})\\n\\nprint(translator:FormatByKey(\\"actions.respawn\\"), { playerName = \\"Quenty\\"}) --\x3e Respawn Quenty\\n```\\n\\n```lua\\nlocal translator = JSONTranslator.new(script)\\n-- assume there is an `en.json` underneath the script with valid JSON.\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"JSONTranslator"}],"function_type":"static","source":{"line":46,"path":"src/clienttranslator/src/Client/JSONTranslator.lua"}},{"name":"PromiseLoaded","desc":"Returns a promise that will resolve once the translator is loaded from the cloud.","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"method","source":{"line":76,"path":"src/clienttranslator/src/Client/JSONTranslator.lua"}},{"name":"FallbackTo","desc":"Makes the translator fall back to another translator if an entry cannot be found.\\n\\nMostly just used for testing.","params":[{"name":"translator","desc":"","lua_type":"JSONTranslator | Translator"}],"returns":[],"function_type":"method","source":{"line":87,"path":"src/clienttranslator/src/Client/JSONTranslator.lua"}},{"name":"PromiseFormatByKey","desc":"Formats the resulting entry by args.","params":[{"name":"key","desc":"","lua_type":"string"},{"name":"args","desc":"","lua_type":"table?"}],"returns":[{"desc":"","lua_type":"Promise<string>"}],"function_type":"method","source":{"line":100,"path":"src/clienttranslator/src/Client/JSONTranslator.lua"}},{"name":"ObserveFormatByKey","desc":"Observes the translated value","params":[{"name":"key","desc":"","lua_type":"string"},{"name":"argData","desc":"May have observables (or convertable to observables) in it.","lua_type":"table?"}],"returns":[{"desc":"","lua_type":"Observable<string>"}],"function_type":"method","source":{"line":115,"path":"src/clienttranslator/src/Client/JSONTranslator.lua"}},{"name":"FormatByKey","desc":"Formats or errors if the cloud translations are not loaded.","params":[{"name":"key","desc":"","lua_type":"string"},{"name":"args","desc":"","lua_type":"table?"}],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":154,"path":"src/clienttranslator/src/Client/JSONTranslator.lua"}},{"name":"Destroy","desc":"Cleans up the translator and deletes the localization table if it exists.","params":[],"returns":[],"function_type":"method","source":{"line":236,"path":"src/clienttranslator/src/Client/JSONTranslator.lua"}}],"properties":[],"types":[],"name":"JSONTranslator","desc":"Utility function that loads a translator from a folder or a table.","source":{"line":5,"path":"src/clienttranslator/src/Client/JSONTranslator.lua"}}')}}]);